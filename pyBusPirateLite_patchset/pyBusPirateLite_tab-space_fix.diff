Index: BitBang.py
===================================================================
--- BitBang.py	(revision 604)
+++ BitBang.py	(working copy)
@@ -183,7 +183,7 @@
 		#print "prescaler ", prescaler, "duty ", duty, "period ", period		
 
 		return self.setup_PWM(prescaler, duty, period)
-        
+	
 	# Sets the pwm aux pin at an specific frequency and duty cycle
 	#
 	# The code follows the PIC24FJ64 datasheet specification an the
@@ -198,40 +198,39 @@
 	# is 16Mhz or a 62.5ns period. 
 	  
 	def set_pwm_frequency(self, frequency, duty_cycle = 0.5):
-        
-        	prescalers = [1.0,1.0/8,1.0/64,1.0/256]
-        
-        	# Timer input frequency = Fosc/2 --> 16000000Hz
-        	# Timer period with 1:1 prescaler = 1/16000000 --> 0.0000000625s --> 0.0625us --> 62.5ns
-        
-        	tcy = 0.0000000625
-        
-        	target_period = 1.0/frequency
- 		
+	
+		prescalers = [1.0,1.0/8,1.0/64,1.0/256]
+	
+		# Timer input frequency = Fosc/2 --> 16000000Hz
+		# Timer period with 1:1 prescaler = 1/16000000 --> 0.0000000625s --> 0.0625us --> 62.5ns
+	
+		tcy = 0.0000000625
+	
+		target_period = 1.0/frequency
+		
 		# precalc some part of the period register formula       
-        	dummy = target_period / tcy
-        
-        	prescaler = -1
-        	
-        	for I in range(4):
-            		period = dummy * prescalers[I] - 1
-            
+		dummy = target_period / tcy
+	
+		prescaler = -1
+		
+		for I in range(4):
+			period = dummy * prescalers[I] - 1
+	
 			# It's a valid 16 bits period register value?
-            		if period < 65536:
+			if period < 65536:
 				# If so we have found the greatest one
-                		prescaler = I
-                		break
+				prescaler = I
+				break
 
 		# If we have found a valid prescaler, calc the duty cycle value
 		# and call the BusPirate function for stablishing the PWM configuration
 
 		if prescaler != -1:
-            		duty = int(period * duty_cycle)
-            		#print "prescaler ", prescaler, " period ", period, "duty", duty
-        		return self.setup_PWM(prescaler, duty, int(period))
-        	else:
-            		print "Can't setup ", frequency, "Hz."
-        
+			duty = int(period * duty_cycle)
+			return self.setup_PWM(prescaler, duty, int(period))
+		else:
+			print "Can't setup ", frequency, "Hz."
+			return False
 
 	def clear_PWM(self):
 		self.port.write("\x13")
